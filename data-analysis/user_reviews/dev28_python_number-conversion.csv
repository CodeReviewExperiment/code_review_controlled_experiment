filename,lines,title,comment
/cr-study-2024/python/number-conversion/number_conversion.py,2:0-2:0,,"Functions are well-organized and focused on singular tasks, with decimal_to_any_format as the top-level function that delegates to system-specific conversion functions based on the format passed.\n\nThe code adheres to PEP 8 style guidelines, with appropriate naming conventions and documentation through docstrings.\n\nType hints are provided for function parameters and return types, improving the code's readability and allowing for static type checking.\n\nProvided for each function, mentioning purpose, parameters, and return type; however, the decimal_to_roman docstring contains a mismatch regarding the range it allows."
/cr-study-2024/python/number-conversion/number_conversion.py,36:8-36:64,,Format.HEXADECIMAL incorrectly points to base 8. It should be 16.
/cr-study-2024/python/number-conversion/number_conversion.py,31:8-31:17,,"Instead of returning just an empty string when an unsupported format is provided to decimal_to_any_format, it might be better to return an explicit error message or raise a ValueError."
/cr-study-2024/python/number-conversion/number_conversion.py,11:0-11:64,,Using a global variable like ALPHABET_VALUES is not necessary. You could use the built-in chr function with ord('A') to calculate the letter corresponding to a value dynamically.
/cr-study-2024/python/number-conversion/number_conversion.py,54:4-54:23,,"decimal_to_any_base could utilize recursion or a stack to build the result string, which may simplify the code and avoid manual string reversal at the end."
/cr-study-2024/python/number-conversion/number_conversion.py,45:4-46:79,,"why not raising an error?\nif you decide to change, remember to update the docs"
/cr-study-2024/python/number-conversion/number_conversion.py,59:0-60:0,,"why not raising?\nwhat about making explicit if 36 is included or not?\nif you decide to raise insterad of returning an error message, consider updating all the other methods accordingly"
/cr-study-2024/python/number-conversion/number_conversion.py,66:3-79:39,,"i think this can be simplified.\nhave a look at this. it makes the tests pass but i did not check with 100% attention if it's perfect\n\nwhile num != 0:\n            div, mod = divmod(num, base)\n            \n            if base >= 11 and 9 < mod < 36:\n                actual_value = ALPHABET_VALUES.get(str(mod), str(mod))\n            else:\n                actual_value = str(mod)\n            \n            new_value += actual_value\n            num = div"