filename,lines,title,comment
/src/main/java/org/crprojects/TodoListApp.java,161:16-161:31,,Using System.exit(0) to terminate the program is generally not preferred in Java applications outside of CLI tools as it prevents cleanup and shutdown hooks from running. Consider alternatives for exiting the loop.\n\nIn particular see related comment in the `run` method.
/src/main/java/org/crprojects/TodoListApp.java,127:4-127:34,,"There are several hardcoded strings that are used directly in your methods. For better manageability and localization support, consider using constants or a resource file for storing such strings.\n\nThe application runs in an infinite loop. You might want to consider having a condition that allows for a graceful shutdown.\n\nThereâ€™s repetitive code (e.g., in gathering user input) that may be refactored into methods to reduce code duplication.\n\nYou've avoided 'magic numbers' in the menu interaction, which is good.\n\nThe program handles integer parsing from user input gracefully by continuously prompting the user until a valid number is received."
/src/main/java/org/crprojects/TodoListApp.java,52:31-52:52,,"Instead of just printing ""Invalid task index,"" it may be helpful to the user to know what valid range is or what caused the input to be invalid."
/src/main/java/org/crprojects/TodoListApp.java,145:39-145:52,,"The application requires the user to enter an index base-1, which is correct from a user perspective, but can be confusing. Consider adjusting the prompts or handling the index translation inside the app methods."
/src/main/java/org/crprojects/TodoListApp.java,15:4-15:59,,It would be better to instantiate this in the `run` method so that it can be closed when exiting the app loop.
/src/main/java/org/crprojects/TodoListApp.java,193:4-193:29,,It would be better to put this class in its own file. Also the logic for reversing it's status (method reverseTaskTatus) would be better to have encapsulated here.
/src/main/java/org/crprojects/TodoListApp.java,11:0-12:0,,"The methods are well-organized with clear names indicating their functionality.\n\ntasks is final, indicating it should not be reassigned after initialization.\n\nThe app's main logic is intermingled with input/output. For future enhancements and better maintainability, consider separating business logic from user interaction and I/O operations.\n\nAdditionally the ArrayList tasks could be refactored into a separate class including the methods that manipulates the list, i.e., addTask, reverseTaskStatus, deleteTask and listTasks."
/src/main/java/org/crprojects/TodoListApp.java,15:12-15:17,,"It's good practice to use the final modifier for the Scanner instance as well, as it's not intended to be changed."
/src/main/java/org/crprojects/TodoListApp.java,171:4-171:35,,The printMenu method is appropriately static because it does not depend on instance fields.
/src/main/java/org/crprojects/TodoListApp.java,42:8-42:35,,"The program checks if an index is within the upper bounds of the task list before operating on it, which is important to prevent IndexOutOfBoundsException.\n\nThe check should also check that the index is > 0 and also if the tasks list is empty.\n"
/src/main/java/org/crprojects/TodoListApp.java,83:16-83:76,,Sorting tasks is implemented nicely with the use of comparators.
/src/main/java/org/crprojects/TodoListApp.java,41:4-41:46,,The method reverseTaskStatus efficiently toggles the done status of a task.
/src/main/java/org/crprojects/TodoListApp.java,44:12-50:13,,"This can be simplified since the only output difference is ""undone"" and ""done"", by using string interpolation.\n\nAlso setting the new value of `task.done` can be done by negating the previous value."
/src/main/java/org/crprojects/TodoListApp.java,21:8-21:39,,"This can be initialized directly on line 14, so this constructor is not needed."
/src/main/java/org/crprojects/TodoListApp.java,62:8-62:35,,This check is missing to check if the index is negative and that the task list is not empty.\n\nSince this is exactly the same check as in line 42 it would be better to have this in a separate method.
/src/main/java/org/crprojects/TodoListApp.java,99:16-99:16,,It would be better to encapsulate the ouput after the index directly in a method in the Task class.
/src/main/java/org/crprojects/TodoListApp.java,185:7-187:9,,As mentioned earlier instantiate the Scanner here.\n\n\nThis method should also handle the exit condition instead of using System.exit in the `interactWithApp` method so that the Scanner can be properly closed.
/src/main/java/org/crprojects/TodoListApp.java,81:7-94:9,,"It would be better to encapsulate these sorting methods in a method of a call Task. In this way one could call tasks.sortByDate(), tasks.sortByPriority() etc..\n\nSince sorting by date is default one could create another method `sortByDefault` that calls `sortByDate` to separate the two cases and make it easier to change the default sorting option in the future."
/src/main/java/org/crprojects/TodoListApp.java,75:10-75:10,,It would be better to have this options as an enum. The enum can the be parsed from the user input outside of this method where also the validity of the input can be checked.
/src/main/java/org/crprojects/TodoListApp.java,111:18-111:18,,See comment in `run` method. This can be moved there and refactored using the `scanner.hasNextInt()` check instead of using a try/catch block.\n\nThe input can then be read directly as an int using `scanner.nextInt()`.
/src/main/java/org/crprojects/TodoListApp.java,132:0-164:72,,The code the cases 1-4 should be moved into separate (private) methods that takes the scanner as input.