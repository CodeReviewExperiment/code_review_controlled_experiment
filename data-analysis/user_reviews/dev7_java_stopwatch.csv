filename,lines,title,comment
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,146:30-146:43,,"MILLIS_2_NANO is a clear constant name expressing its use (conversion from milliseconds to nanoseconds), although MILLIS_TO_NANOS would be more in line with common practice."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,42:0-42:24,,"The StopWatch class documentation is thorough and explains the intended usage well.\nThe use of the State and SplitState enums enhances the readability of the code and shows an understanding of state management.\nThe use of static factory methods (create and createStarted) is a good practice that allows for cleaner code when instantiating the object.\nThe API is designed to be user-friendly, offering methods that prevent misuse by throwing exceptions when methods are called out of order.\n\nError handling is consistent. The class throws exceptions if the methods are called out of order; e.g., stop before start.\nThough the RuntimeException is used, for a more granular control, creating a custom unchecked exception (such as IllegalStopWatchStateException) could be beneficial for clients of the StopWatch class.\n\nMethods start(), stop(), reset(), suspend(), resume(), split(), and unsplit() provide a comprehensive interface for stopwatch functionality.\nAn enhancement could be the isolation of shared logic between stop() and suspend() into a separate private method to avoid duplication.\n\nThe code is consistent with Java naming conventions and the overall style is clean and readable.\nMethod descriptions in comments are clear and follow good documentation practices.\n\nThe class performs well for a single-threaded application with no noticeable performance issues."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,54:4-54:24,,"The State and SplitState enums are well-thought-out representations of the stopwatch's possible states.\nThe enum methods isStarted(), isStopped(), and isSuspended() promote encapsulation of state logic.\nA downside is that the State enum has methods that are not applicable to all constants. For example, isStopped() returns true both for STOPPED and UNSTARTED states, which could potentially be confusing.\n\nThe getTime(), getSplitTime(), and getTime(final TimeUnit timeUnit) methods perform expected conversions and queries."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,37:3-37:32,,"The class is explicitly stated as being not thread-safe, which is good transparency. If necessary, providing a thread-safe version or documenting ways to use it safely in a concurrent environment would be beneficial.\nSince the class is not thread-safe, using it in a multi-threaded context might lead to problems like race conditions."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,505:40-505:78,,"Exception messages should be informative but not directive (""Stopwatch must be ...""). Instead, describe the state (""Stopwatch is not running."")."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,467:8-468:58,,"The use of System.nanoTime() and System.currentTimeMillis() is appropriate for measuring elapsed time.\nThereâ€™s no direct way to access StartTimeNanos and StopTimeNanos, which are private; if there's no need to expose them, the current design promotes encapsulation. But if they are needed externally, getters should be provided.\n\nIt is also a duplicated way to compute the time, as one (the millis) can be computed from the other (from the nanos)"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,315:7-315:66,,This seems like a mistaken comment.
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,327:8-329:9,,"This code seems to be copied from the getStarTime function. The check is partially wrong as seems to be missing the checks for looking at the state only if its stopped or splitted, so when the stopTimeMillis is actually defined. "
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,330:0-331:0,,This comment refers to the wrong variable.
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,338:0-339:0,,"This is partially wrong, it could also be 0 in case the StopWatch is UNSTARTED"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,375:0-376:0,,This is partially wrong as the `isStopped` function holds the state also for the UNSTARTED state
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,385:4-388:17,,This comment is copied from the isStarted's comment
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,411:3-414:5,,"This code resets the state, but doesn't clears the internal values as stated in the comments.\nIt means that it won't reset the startTimeNanos and all the other time-related variables"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,194:4-209:0,,These two variales could be simply replaced by the computed nanoseconds to milliseconds and the functionality would be preserved having to keep only one of the two counting time systems
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,469:8-469:42,,The code should also reset the SPLIT/UNSPLIT state
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,482:8-483:55,,This could be concatenated in a single if with an AND statement