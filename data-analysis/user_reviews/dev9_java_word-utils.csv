filename,lines,title,comment
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,38:0-38:22,,"It appears to be a utility class, as demonstrated by a private constructor to prevent instantiation, static methods, and a comprehensive use of the Apache Commons StringUtils class for string operations.\n\nIt properly reuses existing utility methods from Apache Commons Lang, adhering to the DRY (Don't Repeat Yourself) principle.\n\nThe code follows a consistent style which is good in terms of readability and maintainability. The indentation and spacing are consistent throughout.\n\nThe methods are documented using Javadoc, which is thorough and includes @param, @return, and @since. It has examples that nicely illustrate expected behavior, which is helpful for users of the utility.\n\nThe file begins with a clear license notice, following proper protocol for usage of Apache Foundation code.\n\nMethods like initials, swapCase, uncapitalize, and wrap are well-implemented with considerations for Unicode, delimiters, and word wrapping rules.\n\nThe methods throw RuntimeException without wrapping it into a more specific unchecked exception. While they are validating input arguments (e.g., IllegalStateException or IllegalArgumentException), a custom exception might provide more information.\n\nAs of now, it is not specified if these methods are safe for use in a multi-threaded environment. Judging by the stateless nature of the utility, it's likely fine, but it should be explicitly stated.\n\nThe methods handle null values and empty strings, making them robust against common input issues.\nOverall, this code follows good coding practices, is well organized and is easy to understand, aiming for reliability and clarity in its operations and documentation."
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,79:4-79:35,,"Method abbreviate: Follows guidelines for string abbreviation, checking bounds, and appending content appropriately. Javadoc and parameter validation are done well."
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,136:4-136:35,,"Method capitalize and capitalizeFully: Uses a smart implementation considering Unicode characters, which is better than simple char-based manipulation. Good reuse of Character methods for case transformation."
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,278:4-278:42,,Method containsAllWords: Uses regular expressions to locate words. This is efficient for simple cases but may not be scalable to very large strings due to the potential for complex regex evaluation.
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,286:12-286:69,,"Regular expression patterns are compiled inline within loops (e.g., in containsAllWords). This can be improved by compiling the pattern once outside of the loop to improve performance."
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,751:4-751:29,,wrap methods perform a lot of substring operations which could be optimized further by leveraging the region matching capabilities of Matcher in java.util.regex.\n\nThe wrap functionality seems a bit redundant and could potentially be condensed into fewer lines or methods. There are also magic numbers (like the number 32 added to the initial buffer size) which could be defined as constants with descriptive names for clarity.
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,89:10-89:10,,"Why not just return the string as in the ""empty"" case? I mean, that string will never be shortened, so upper and text-to-append won't ever be considered"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,80:46-80:46,,"-1 as a sentinel value is nasty. It makes sense to use that value, but something ticks me off there..\nHonestly I'd either \na) overload abbreviate with another version that doesn't accept an upper value.\nb) switch from int to Integer in the arg types and prepare for a null param to come in, instead of -1.\nHonestly: thanks docs that document this behavior, but without docs, I'd go with ""null if no upper limit applies"""
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,60:12-60:12,,"maybe add an example for when upper actually comes into play.. btw, is upper inclusive or not?Like \n""abcdef"", 0, 4, null => ""abcd"""
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,303:47-303:47,,"do you really need the check on length explicitly?\nyou don't use it in the inner block, and it would be managed in any case in the for loop\n"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,198:23-198:23,,food for thought: is there any case in which outOffset is not the length of the array?
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,179:12-179:12,,consider switching for to a while loop: automatically I was thinking the increment was been done here..
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,190:26-190:26,,"noob question on my size: why are you incrementing by count of titleCaseCodepoint instead of the usual codepoint? It shouldn't happen, but wouldn't it screw up if the number of index if you the title one is > 0x10000 but the untitled one is less?"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,182:26-182:26,,"the whole execution flow seems clunky to me.\nI thought of it like:\n- check if I have to capitalize\n   - if so: do so and push\n   - uncapitalize next\n- check if currentChar is in delim\n  - if so set capitalizeNext\n  - push\n- increase index by desired amount\n\nI trust you that it works, but seems kinda strange...\n"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,249:42-249:42,,"at least for consistency, shouldn't it be final as well? I mean, \ncapitalizeFully(""x"") <- ""x"" is final\ncalls capitalizeFully(""x"", null) <- ""x"" is NOT final\ncalls capitalize(""x"", null) <- ""x"" is final again"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,79:34-79:34,,"do we really want to treat differently\n""a b"" and ""a\tb""?"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,282:0-282:44,,"instead of parsing n times the different words, wouldn't it be easier to split the original input string separating by space chars, and then check that the intersection of the sets (word) and (words) is equal to (words)?"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,278:63-278:63,,"why is it called word?\n""abcde fghhi lsfv"" is a valid value, but I wouldn't call it a ""word"""
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,366:68-366:68,,"I don't really like that\ninitials(""A B C"", null) behaves differently from initials(""A B C"", [])"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,381:0-381:100,,"condition is clunky, instead of checking if null here, maybe add the delimiters null case when generating the delimiters set..."
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,390:45-390:45,,as above: when is count!=newCodePoints.length?
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,422:17-422:17,,"give it a more sensible name, please.\nit wasn't immediately apparent that ws stands for WhiteSpace, I was thinking as Word Swap\n"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,443:48-443:48,,as above - outoffset and array length\n
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,492:11-492:11,,"wait. isn't this stuff just the opposite of capitalize?\nIf so, woudn't it be better to just join them together as the only thing that changes is a Char.toLower instead of Char.toTitle?\n(template method?)"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,534:9-534:9,,why do you suddenly switch from text to html table for examples?
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,771:69-771:69,,32? From where? What is it? Assuming at most 32 lines?
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,776:42-776:42,,way too convoluted...
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,774:19-774:19,,"(strong) suggestion: split this into multiple methods, where it is clear for each step exactly what you are doing and especially why!\nGuaranteed in 3 days, you'll have no clue how this works"
/cr-study-2024/java/word-utils/src/main/java/org/crprojects/WordUtils.java,352:12-352:12,,"maybe add an example with more than one consecutive delimiters, eg: (""A  B"") or (""A. .B"", delims [' ','.'])"