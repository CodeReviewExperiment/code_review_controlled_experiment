filename,lines,title,comment
/src/main/java/org/crprojects/StopWatch.java,42:0-42:24,Custom Exception,"Error handling is consistent. The class throws exceptions if the methods are called out of order; e.g., stop before start.\nThough the RuntimeException is used, for a more granular control, creating a custom unchecked exception (such as IllegalStopWatchStateException) could be beneficial for clients of the StopWatch class."
/src/main/java/org/crprojects/StopWatch.java,401:23-401:36,Inaccurate Naming,"I noticed a discrepancy in the constant naming. The constant 'MILLIS_2_NANO' does not align with the method name nanoToMillis() and its description. To maintain consistency, the constant should be renamed to 'NANO_2_MILLIS'."
/src/main/java/org/crprojects/StopWatch.java,254:8-259:9,Consolidate conditional,"The getNanoTime method seems to contain unnecessary code duplication. The first two if statements both return the same value, which could be simplified to reduce redundancy. Consider consolidating the conditions to avoid repetitive code and enhance maintainability."
/src/main/java/org/crprojects/StopWatch.java,482:8-486:9,,The stop method contains an unnecessary nested if statement. The condition inside the first if block can be simplified by combining it with the second if statement to achieve a clearer and more concise logic flow. Reducing the complexity of these conditional checks will lead to improved readability and maintainability of the code.
/src/main/java/org/crprojects/StopWatch.java,377:15-377:51,Comment does not align,"The documentation for the isStopped() method is inaccurate. It currently states that the method is checking whether the stopwatch is started, whereas it should reflect the correct behavior, which is determining whether the stopwatch is actually stopped. This discrepancy should be addressed to ensure clarity and correctness for users of this method."
/src/main/java/org/crprojects/StopWatch.java,385:5-387:51,Comment does not align,"The documentation for the isSuspended() method contains inaccuracies. The main description should reflect that the method is testing whether the stopwatch is suspended, not just started. Additionally, the @return description is incorrect, as it should specify that the method returns a boolean indicating whether the stopwatch is suspended. These issues need to be corrected for better clarity and understanding."
/src/main/java/org/crprojects/StopWatch.java,132:132-132:132,Wording is unclear here,See later comment about the confusing wording of the stop watch isStopped conditions. The same comment and word fixing applies here as well.
/src/main/java/org/crprojects/StopWatch.java,315:65-315:65,Comment not necessary,The comment about stopTimeNanos seems unrelated to the startTimeMillis .
/src/main/java/org/crprojects/StopWatch.java,330:0-331:0,Comment unnecessary,Same out of place comment as above.
/src/main/java/org/crprojects/StopWatch.java,73:8-73:8,,Same comment here as above. After a 5th readthrough I think I understand the intended logic for the isStopped criteria. Less confusing wording for the comment could be:\n\nTests whether StopWatch is stopped. The StopWatch which is not yet started OR the StopWatch which is explicitly stopped is considered as stopped.\n\nUsing OR instead of AND makes the intended functionality more clear.
/src/main/java/org/crprojects/StopWatch.java,194:1-200:33,Odd usage of millis and nanos,"The different usage of milliseconds and nanoseconds is a bit confusing. We have startTimeMillis and startTimeNanos, but they seem to be tracking not just different units, but also different time values. start/stopTimeNanos is tracking elapsed time (time that stopWatch has been in running state), versus start/stopTimeMillis which is tracking total time since pressing start (including suspended state).\n\nAssuming the above is accurate, it might be more clear to instead use only nanoseconds and milliseconds, and split by ""startElapsedTimeNanos"" and ""startTotalTimeNanos"" to capture that the times are tracking different things. If you need both nanoseconds and milliseconds, just convert when needed, no need to store the same value twice in 2 different units. Naming could probably use some work, but this is the general idea."
/src/main/java/org/crprojects/StopWatch.java,518:5-518:5,Inaccurate comment,nitpick: comment is not 100% accurate. Nothing actually changes with the stop time. The state is just updated to not allow for checking split time anymore. Timing never stops from the original starting point. I would give this comment a look.
/src/main/java/org/crprojects/StopWatch.java,507:0-508:0,Functionality Breakage,"This seems like it will break the ""split time"" functionality since it overwrites the stopTimeNanos. Maybe think about just having a splitTimeNanos so as not to overload stopTimeNanos and have hard to track logic like this."
/src/test/java/org/crprojects/StopWatchTest.java,17:0-18:0,More corner case testing,"This is a good start to a test suite, but I would look to adding some more tests that try to hit some of the corner cases with combinations of split/unsplit/suspend/resume. I think you can likely write at least 1 test case that fails based on the comment in StopWatch.java if you attempt to getSplitTime after a start->split->suspend->resume->getSplitTime flow."