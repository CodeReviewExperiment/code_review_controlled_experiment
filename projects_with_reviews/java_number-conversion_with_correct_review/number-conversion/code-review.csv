sha,filename,url,lines,title,comment,priority,category,additional,id,private
"","/src/main/java/org/crprojects/NumberConversion.java","","57:12-57:57","","There is a critical bug. For HEXADECIMAL, it erroneously uses base 8 instead of 16. It should be decimalToAnyBase(num, 16).","0","","","4e7917e0-ef14-4b02-80da-f5b6220ac875","0"
"","/src/main/java/org/crprojects/NumberConversion.java","","71:8-71:40","","Bounds checking in decimalToRoman prevents negative numbers and those greater than 4000, which is excellent. However, the condition should reject the number 4000 as well since it's not representable in the standard Roman numeral system (I to MMMCMXCIX).","0","","","f6b55fb6-b9bb-4838-94e6-5feac393e0d7","0"
"","/src/main/java/org/crprojects/NumberConversion.java","","88:7-89:14","","The comment on the decimalToAnyBase method incorrectly states ""converts decimal to Roman format"". This seems to be a copy-paste error from the other method, and should describe conversion to a generic base instead.","0","","","339de73a-0b20-4c31-b98a-5c9f647366df","0"
"","/src/main/java/org/crprojects/NumberConversion.java","","99:19-99:54","","The error message is not accurate. It ought to indicate that the input needs to be non-negative, as the method permits values that are equal to 0.","0","","","9a637ed7-1ee6-4869-9fc6-7347df767cdb","0"
"","/src/main/java/org/crprojects/NumberConversion.java","","72:19-72:84","","There is a mismatch between the error message and the input validation. The method validates that the input is not less than 0 by accepting values equal to zero, yet the error message incorrectly states that the input must be greater than zero.","0","","","49d03fe2-cdb4-4c97-a3b5-6631c197b5bd","0"
