filename,lines,comment
/cr-study-2024/python/word-utils/WordUtils.py,63:8-64:65,"The method logic is sound for abbreviating strings based on lower and upper limits. However, the initial check for upper < 0 might be unnecessary since the method raises an error if upper is less than lower, and there's a later condition that sets upper to the string length if it's greater. However, this is misleading because the method documentation says to specify -1 to disable the upper limit, but this condition will prevent using -1 as intended. This seems to be a discrepancy between the documentation and implementation."
/cr-study-2024/python/word-utils/WordUtils.py,91:4-91:70,"Both methods capitalize and capitalize_fully handle capitalization using a set of delimiters. The implementation with a callback and flag is correct but might be more complex than necessary. Python's string methods, such as split and join, along with list comprehensions, could potentially simplify the implementation. Since we allow multiple delimiters, we might use the regex module's split method instead though."
/cr-study-2024/python/word-utils/WordUtils.py,163:4-163:76,"This method effectively calls capitalize on a lowercased version of the input string. This is a clean way to ensure full capitalization but may introduce extra processing for large strings. Consider if direct manipulation without lowering and then capitalizing might be more efficient in some cases. Also, we can shorten the documentation significantly here. It's probably easier if we just just apply the `title()` function to each word we extract and if we add a helper function that applies a lambda to each element after the given separators of a string) since we could shorten capitalize and capitalize_fully significantly then."
/cr-study-2024/python/word-utils/WordUtils.py,244:12-244:70,"The method compiles a new regex for each word checked. Compiling regexes can be expensive, especially in a loop for many words. Consider if there's a way to check word presence without compiling a regex for each word, possibly using set operations or other string methods."
/cr-study-2024/python/word-utils/WordUtils.py,251:4-251:68,"The method has a unique approach to handling delimiters, including treating whitespace as a default delimiter. This works well, but the method could potentially be simplified by using regular expressions or built-in string functions. Furthermore, the helper function used for the capitalization (applying a lambda to all words extracted from the delimiters and keeping the delimiters, by using for example the regex split function) could be used here to improve readability and just add the lambda that takes the first character of the strings here."
/cr-study-2024/python/word-utils/WordUtils.py,312:4-312:41,"The custom logic for swapping case based on character position and whitespace detection is correct. However, this method's logic might be more complex than necessary for achieving the desired result, especially considering Python's built-in swapcase method, which swaps the case of all letters in a string. The additional logic for handling title case and conversion after whitespace or at the start adds value beyond swapcase, but it's worth noting the complexity added."
/cr-study-2024/python/word-utils/WordUtils.py,362:4-362:72,"Similar to capitalize: This method shares logic with capitalize, but inversely applies case changes. The same suggestions about simplification apply here."
/cr-study-2024/python/word-utils/WordUtils.py,8:0-9:0,"A bit more details could be helpful here to understand faster what this class is about. (e.g., specify that words are separated by spaces and give some example operations so the user has a better idea about the class."
/cr-study-2024/python/word-utils/WordUtils.py,13:0-14:0,"It's not clear what 1.1 is here (a version? some measurement?) and also ""what since"" then? The exception handling? If this is about the exception handling, it's probably better to remove this line, because we should have this info in the changelog."
/cr-study-2024/python/word-utils/WordUtils.py,10:0-12:0,"It suffices to say that this class won't throw an exception for 'None' input. However, we should maybe rething the decision to handle 'None' input gracefully, since this adds a lot of extra checks and complexity to the code. "
/cr-study-2024/python/word-utils/WordUtils.py,19:0-20:0,"Nicely doesn't describe how, maybe say ""Abbreviates the words at the first space after the lower limit or as soon as the upper limit is reached."" Then we can remove the following paragraph."
/cr-study-2024/python/word-utils/WordUtils.py,17:0-18:0,"This method is doing more than just abbreviating a string. We should move the ""append_to_end"" variable and functionality to another function."
/cr-study-2024/python/word-utils/WordUtils.py,38:0-61:22,"We should move examples to the README or a separate documentation, to improve code readability. A link/hint where to find examples suffices here."
/cr-study-2024/python/word-utils/WordUtils.py,27:2-28:93,"""The string to be abbreviated."" is enough here as a description, we can specify what the function returns in the return value."
/cr-study-2024/python/word-utils/WordUtils.py,29:0-30:0,"We should throw an error/inform the user if they use a wrong value (e.g., negative value)."
/cr-study-2024/python/word-utils/WordUtils.py,30:5-31:78,"What about making this variable optional? If there is no upper limit given, then it is disabled.\nAnd we throw an error/inform the user - instead of documenting here - if they provide an invalid value. "
/cr-study-2024/python/word-utils/WordUtils.py,32:5-34:100,"As mentioned above, we should probably not have this functionality here at all and move ""appending"" to a separate function. Furthermore, since this does not count towards the limit, it also adds more confusion to the user here."
/cr-study-2024/python/word-utils/WordUtils.py,36:12-36:12,We can add here that it returns None if None was given as an input.
/cr-study-2024/python/word-utils/WordUtils.py,71:0-72:31,"We can add this condition to line 68 (and remove the assignment), since the string is not gonna be abbreviated if lower is longer than the string's length."
/cr-study-2024/python/word-utils/WordUtils.py,77:0-78:0,"Since we are moving the append functionality to another function (that simply appends a string to the end), we don't need a list here."
/cr-study-2024/python/word-utils/WordUtils.py,79:4-88:30,"What about writing this in this way: if index == -1:   return string[:min(len(string) - 1, upper)] else:   return string[:index]"
/cr-study-2024/python/word-utils/WordUtils.py,104:0-105:0,"We can remove this comment, because that info is also in the return specification at line 134."
/cr-study-2024/python/word-utils/WordUtils.py,134:0-135:0,"I would keep the notation we sued for parameters, for example: str (str | None): None, if input is None."
/cr-study-2024/python/word-utils/WordUtils.py,107:0-126:23,"I think it's better to move this exhaustive list of examples to tests and/or a ReadMe/separate documentation, leaving a hint (e.g., See X) /link to them."
/cr-study-2024/python/word-utils/WordUtils.py,93:8-93:66,"We can probably simplify this comment, for example like this: Capitalizes the first letter of all the delimiter-separated words in a string. The delimiters represent a set of characters after which a new word begins."
/cr-study-2024/python/word-utils/WordUtils.py,130:0-131:92,"Instead of specifying None, we could should just say that the default is a single whitespace."
/cr-study-2024/python/word-utils/WordUtils.py,140:0-141:0,"For consistency, we should either change this check like in line 68 to ""string == """" or string is None"" or change line 68 to this check."
/cr-study-2024/python/word-utils/WordUtils.py,143:0-144:0,"We shouldn't reassign to an argument, but instead to a new variable.\nAlso, we can simplify this expression:\n= { delimiter or "" "" for delimiter in delimiters  }"
/cr-study-2024/python/word-utils/WordUtils.py,215:0-229:16,"Similar to above, we can probably move the examples to a more dedicated documentation in case the user needs them, but to not bloat the code."
/cr-study-2024/python/word-utils/WordUtils.py,208:0-209:0,"We can simplify this method by checking first for none for words and string, then with one list concatenation using the ""in"" keyword to check if a word is not None and in the string. Afterwards we can just call all() on the list and return that."
/cr-study-2024/python/word-utils/WordUtils.py,242:0-243:0,We should document or decide if we want to discard multiple withespace characters.
/cr-study-2024/python/word-utils/WordUtils.py,6:0-7:0,"Overall the methods implemented in this class have duplication and a lot of complexity that we can reduce. I suggest to add a function that takes a string, a list of delimiters and a lambda. This function can then be used for capitalize, capitalize_fully, initials, swap_case and uncapitalize by just changing the passed lambda accordingly."