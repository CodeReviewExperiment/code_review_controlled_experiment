filename,lines,title,comment
/src/main/java/org/crprojects/NumberConversion.java,57:12-57:57,,"There is a critical bug. For HEXADECIMAL, it erroneously uses base 8 instead of 16. It should be decimalToAnyBase(num, 16)."
/src/main/java/org/crprojects/NumberConversion.java,71:8-71:40,,"Bounds checking in decimalToRoman prevents negative numbers and those greater than 4000, which is excellent. However, the condition should reject the numbers 0 and 4000 as well since it's not representable in the standard Roman numeral system (I to MMMCMXCIX)."
/src/main/java/org/crprojects/NumberConversion.java,88:7-89:14,,"The comment on the decimalToAnyBase method incorrectly states ""converts decimal to Roman format"". This seems to be a copy-paste error from the other method, and should describe conversion to a generic base instead."
/src/main/java/org/crprojects/NumberConversion.java,99:19-99:54,,"The error message is not accurate. It ought to indicate that the input needs to be non-negative, as the method permits values that are equal to 0."
/src/main/java/org/crprojects/NumberConversion.java,72:19-72:84,,"There is a mismatch between the error message and the input validation. The method validates that the input is not less than 0 by accepting values equal to zero, yet the error message incorrectly states that the input must be greater than zero."
/src/main/java/org/crprojects/NumberConversion.java,45:46-45:61,,Should be only for valid input. Not just any input.
/src/main/java/org/crprojects/NumberConversion.java,95:26-95:42,,This method does not properly convert hexidecimal values when they involve letters.