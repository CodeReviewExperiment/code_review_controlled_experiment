filename,lines,title,comment
/src/main/java/org/crprojects/TicTacToe.java,67:12-67:23,,The Player enum and Outcome record types are clean and idiomatic in Java.
/src/main/java/org/crprojects/TicTacToe.java,84:12-84:37,,"The use of sealed classes for defining Outcome restricts subclassing, which suits the limited outcomes in tic-tac-toe."
/src/main/java/org/crprojects/TicTacToe.java,24:12-24:18,,"Static fields for default configurations (grids, wins) are a good design choice as these don't change."
/src/main/java/org/crprojects/TicTacToe.java,115:22-115:46,Exception Handling,The use of a runtime exception wrapper (UncheckedIOException) is an interesting choice. It simplifies the code but may not be best for handling user input errors. Consider user-friendly error messages instead.
/src/main/java/org/crprojects/TicTacToe.java,157:26-157:57,,Catching InterruptedException and re-interrupting the thread is a correct practice.
/src/main/java/org/crprojects/TicTacToe.java,137:64-137:81,,Integer.MIN_VALUE is used to denote cell weights that should no longer be considered. This is not intuitive. A named constant or another approach to marking unusable cells might be more readable.
/src/main/java/org/crprojects/TicTacToe.java,21:25-21:59,,The use of RandomGenerator is done to ensure decisions are unpredictable.
/src/main/java/org/crprojects/TicTacToe.java,156:28-156:46,,"This is used to delay computer moves, potentially to mimic thinking. Use with caution, as this can make unit testing harder and could affect the user interface responsiveness."
/src/main/java/org/crprojects/TicTacToe.java,163:22-163:54,,You're catching RuntimeException around the game loop. This is too broad and could potentially catch unexpected exceptions that would be better handled explicitly or allowed to propagate up.
/src/main/java/org/crprojects/TicTacToe.java,107:4-107:25,,User input is read and immediately processed. Consider validating and sanitizing input better to handle unexpected inputs without crashing.\n\nConsider breaking down the input reading and validation into its own method for clarity and reuse.\n\nDefining values such as Integer.MIN_VALUE and hardcoded switches for special move sequences at the start can make the code easier to understand and modify.
/src/main/java/org/crprojects/TicTacToe.java,37:33-37:45,,You're using integer arrays to represent win states. A class or a more straightforward data structure to represent the state could improve code clarity and maintainability.
/src/main/java/org/crprojects/TicTacToe.java,17:0-17:22,,"Your code is organized and significant effort is apparent in architecting the game. You've used enums to represent players and records for outcomes, which is a good use of Java's type system.\n\nThe methods are well-structured with clear responsibilities.\nNaming is mostly clear and consistent, adhering to Java's naming standards.\n\nThe program is not designed for scalability beyond a 3x3 grid, but that is consistent with the standard tic-tac-toe game. If you plan on extending the game, you might need to refactor for flexibility.\nYour program is well put together, embodying many Java best practices. Careful attention is needed for error handling and input processing to ensure robustness. Keep potential scalability in the back of your mind, even if the current scope is limited. But, for a console-based tic-tac-toe game, it's quite thorough and shows a sound understanding of Java.\n\nYou have a good start with comments, but consider adding more on complex logic, especially around weight fixing and move decisions for the computer player."
/src/main/java/org/crprojects/TicTacToe.java,65:4-65:44,,The moves Map with Sets for tracking moves is an appropriate choice for quick look-ups and maintaining unique moves.
/src/main/java/org/crprojects/TicTacToe.java,110:0-117:34,Starting game logic,"nit: probably fine, but any character outside of n will result in playing the game. If that's intended then no problem"
/src/main/java/org/crprojects/TicTacToe.java,16:0-16:0,Computer win scenario,"I'm not seeing where the issue is in the logic, but when playing the game, when I let the computer win, I have to input 1 more move even after the computer has already won. This does not match up with typical tic-tac-toe logic.\n\nBug can be reproduced playing the following move order (7, 8, 4)"
/src/main/java/org/crprojects/TicTacToe.java,16:0-16:0,UI,"Other general note, could be useful to display the numpad entries in the empty slots for those using laptops without numpads. I constantly had to scroll up and look at the numpad again to pick the correct numbers on my macbook."
/src/main/java/org/crprojects/TicTacToe.java,123:0-128:94,Initialize Round Function,"Move to separate function, maybe initializeRound."
/src/main/java/org/crprojects/TicTacToe.java,179:0-185:13,Repeated Code,"The choice check and try catch block are repeated here and above, move to a common function."
/src/main/java/org/crprojects/TicTacToe.java,118:0-121:39,,"Could be a new function: initializeGame, or something similar."
/src/main/java/org/crprojects/TicTacToe.java,84:0-85:0,Function Naming,"Just an opinion, but I think changing this Outcome to be ""GameStatus"" or something similar might make some of the code cleaner. We can then ditch the returning nulls and null checks of Outcome and instead check ""gameStatus == InProgress, gameStatus == Win, gameStatus == Draw"". I think the explicit InProgress check is much nicer than the null check."
/src/main/java/org/crprojects/TicTacToe.java,209:1-210:0,Add comments,The logic for how weights work isn't straightforward. Could use some documenting to explain exactly how the weights are being used in case we need to add or change it later.
/src/main/java/org/crprojects/TicTacToe.java,199:2-200:28,Hardcoded grid,"Hardcoding width and height of tic-tac-toe grid here. Maybe easier to just make width/height now and do i/j calculations based off that. Will make the code easier to read, and easier to add configurable grid size in the future."
/src/main/java/org/crprojects/TicTacToe.java,197:0-198:0,Function name too generic,"put is too generic, make function name more descriptive."
/src/main/java/org/crprojects/TicTacToe.java,202:0-203:0,,"Function is both placing marker and displaying grid. May be better to let the game loop decide when to draw and when not to draw. If leaving this here, update the comment of the function to better describe the functionality."
/src/main/java/org/crprojects/TicTacToe.java,60:1-63:18,,Could use some comments here describing how these work.
/src/main/java/org/crprojects/TicTacToe.java,248:1-249:0,,"consider using the full name ""computerMove"" rather than compMove."
/src/main/java/org/crprojects/TicTacToe.java,141:0-149:25,Repeated code,"This code is repeated in compMove and I wouldn't say is super straightforward. I would move it to its own function, give it a proper name and add some comments describing the logic."
/src/main/java/org/crprojects/TicTacToe.java,133:0-134:0,Superfluous loop,"This for loop shouldn't be here. It's causing the issue I mentioned in another comment with the computer win not registering in time, and it also causes the ""What's your move?"" prompt to only be printed on the first move. I don't think this was intended."
/src/main/java/org/crprojects/TicTacToe.java,152:26-152:26,Loop hard to read,"A nice refactor for this for this loop (and also moving this loop to a function which returns win or draw) to make it cleaner may be:\n\ndeterminePlayerMove() -> (throws IllegalMoveException)\nperformMove(Player.HUMAN, cell)\nupdate...() get better name, but update fixWeights/winStates used by AI/win determination.\nstatus = checkGameStatus()\nif (status == WIN || status == DRAW) return status;\n\ndetermineComputerMove\nperformMove(Player.COMPUTER, cell)\nupdate...()\nstatus = checkGameStatus()\nif (status == WIN || status == DRAW) return status;\n\n\n"
/src/main/java/org/crprojects/TicTacToe.java,271:0-281:21,Method doing more than comments say,Consider moving this logic out of this function which should just determine the computers next move. Let game loop update weights and winStates.