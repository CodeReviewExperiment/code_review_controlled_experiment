filename,lines,title,comment
/todo_list.py,6:0-6:18,,"The use of classes (TodoListApp and nested Task) and enums (Option and Sort) is appropriate for encapsulating functionality and maintaining application state.The code is well documented, with each method having a clear docstring that describes its behavior, parameters, and return types. The class also provides module-level documentation for understanding the application's purpose and usage.\n\nMethod names like add_task, reverse_task_status, delete_task, list_tasks, etc., are descriptive and follow Python's naming conventions.\n\nThe usage of static methods (process_input_int and print_menu) where instance state isn't modified is a good practice.\n\nMore nuanced exceptions or custom exception classes can be used for specific error scenarios instead of printing error messages directly."
/todo_list.py,179:4-179:23,,"Enumerations are used effectively to represent the menu options and sorting methods, providing cleaner switch-case logic and better readability."
/todo_list.py,195:4-195:21,,"The Sort enum's members are created using functools.partial, which is a bit unconventional for readability. Enum values can be lambda functions directly or even better, method references."
/todo_list.py,79:8-82:72,,The list_tasks method can have the sorting logic refactored to a separate method for clarity.
/todo_list.py,135:4-135:21,,"The print_menu could dynamically generate the options based on the Option enum, eliminating the need to manually update the menu if new options are added."
/todo_list.py,130:16-130:22,,The exit() call in the interact_with_app method will globally exit Python and may not be desirable if the TodoListApp is to be used as part of a larger program. Consider raising an exception or setting a flag to break from the loop.
/todo_list.py,168:12-168:47,,Representation of the task's creation date might benefit from a formatted string for better readability.
/todo_list.py,193:16-193:68,,"The exit case in the Option enum's __str__ method raises a NotImplementedError as a default case. A default case in an Enum's __str__ method may not be necessary, and this behavior could be confusing."
/todo_list.py,89:4-89:43,,"Although process_input_int is robust in handling non-integer inputs, you could further improve user input validation for tasks (e.g., negative priority, string stripping)."
/todo_list.py,41:8-41:41,,There's no error handling for user inputs for positions that are already taken when marking tasks as done/undone or for incorrect input formats outside of integer validation.
/cr-study-2024/python/todo-list/todo_list.py,175:12-175:46,,Consider printing a friendly date
/cr-study-2024/python/todo-list/todo_list.py,50:12-50:37,,"nit: This might be something to move into the Task class. Not sure if exposing the ""done"" attribute directly can bite us in the future. Encapulating this behavior inside the class can simplify things in case a reverse requires something else to happen in the future.  "
/cr-study-2024/python/todo-list/todo_list.py,63:11-63:22,,This accepts negative numbers. Please add input validation. 
/cr-study-2024/python/todo-list/todo_list.py,86:21-86:22,,Print a more friendly 1-based enumeration
/cr-study-2024/python/todo-list/todo_list.py,117:108-117:111,,"If the list are printed using 0-based indexes, decrementing the input by 1 introduces a bug"