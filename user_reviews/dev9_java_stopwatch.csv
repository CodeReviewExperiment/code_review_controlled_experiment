filename,lines,title,comment
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,42:0-42:24,,"Error handling is consistent. The class throws exceptions if the methods are called out of order; e.g., stop before start.\nThough the RuntimeException is used, for a more granular control, creating a custom unchecked exception (such as IllegalStopWatchStateException) could be beneficial for clients of the StopWatch class."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,482:8-486:9,,The stop method contains an unnecessary nested if statement. The condition inside the first if block can be simplified by combining it with the second if statement to achieve a clearer and more concise logic flow. Reducing the complexity of these conditional checks will lead to improved readability and maintainability of the code.
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,377:15-377:51,,"The documentation for the isStopped() method is inaccurate. It currently states that the method is checking whether the stopwatch is started, whereas it should reflect the correct behavior, which is determining whether the stopwatch is actually stopped. This discrepancy should be addressed to ensure clarity and correctness for users of this method."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,385:5-387:51,,"The documentation for the isSuspended() method contains inaccuracies. The main description should reflect that the method is testing whether the stopwatch is suspended, not just started. Additionally, the @return description is incorrect, as it should specify that the method returns a boolean indicating whether the stopwatch is suspended. These issues need to be corrected for better clarity and understanding."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,254:8-259:9,,"The getNanoTime method seems to contain unnecessary code duplication. The first two if statements both return the same value, which could be simplified to reduce redundancy. Consider consolidating the conditions to avoid repetitive code and enhance maintainability.\nMaybe switch to a ""switch"" statement as well, so that we don't have that nasty throws, but exaustiveness is checked at compile time"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,30:7-30:92,,"maybe this should be reworded or given a different importance. While I can expect suspend  & stop to be called twice (with no reset/resume) to be an error, I woudln't expect not to be able to do multiple splices (e.g: thinking about running laps)"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,375:104-375:113,,this Stopwatch word can be removed
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,365:72-365:90,,also started watch -> considered to be started
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,305:7-305:124,,"Please, do not copy-paste the @return description, it only clutters visuals..."
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,320:7-320:124,,ditto
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,343:16-343:23,,"why do we have a getNanoTime(), but this is getTime() and not getMilliTime?"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,344:15-344:44,,"getTime(), why does it do the conversion by himself, when he can leverage the overridden method?"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,462:87-462:88,,why this empty spaces?
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,315:11-315:24,,stopTimeNanos? Why do we care?
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,203:36-203:36,,"I'm missing why you need to keep this variables, and you cannot convert nanoTimes directly in the getStartTime"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,205:108-205:120,,maybe you were referring to getStopTime\n
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,194:4-200:33,,"I'm missing why you need to keep this variables, and you cannot convert nanoTimes directly in the getStartTime"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,322:42-322:50,,"copy-paste error\n""was started"" -> has been running\n"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,394:4-402:5,,"do you really need this? can't you convert them (since we're always talking about time) with the ""convert"" like you did in the getTime() method?"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,429:8-429:70,,"There is something fundamentally broken here...\nConsider this case:\nyou start the clock, then immediately split it.\nAfter a while, you suspend the clock. And wait a lot.\nNow what happens when you resume? Normal clock time works, but...\n\nexample:\nThread.sleep(10);\n        // Split the StopWatch\n        stopWatch.split();\n        // Wait for 1 second\n        Thread.sleep(1000);\n        stopWatch.suspend();\n        Thread.sleep(10000);\n        stopWatch.resume();\n        Thread.sleep(1000);\n\nGives this output, that I don't think is correct at all!\n\nTotal time: 2010, split time: -8989.   <--------- !!!!\nElapsed time: 2023\n\n\n\n\n\n"
/cr-study-2024/java/stopwatch/src/main/java/org/crprojects/StopWatch.java,42:0-42:24,,Honestly: I quite doubt that using only 2 vars (start and stop) is enough to cover all cases - it has a bug in case of the split & sleep case (see resume() code review).\nBut it also cannot manage the multiple-split-cases - which is something I would definitely expect in such a class.\n\n